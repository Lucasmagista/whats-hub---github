{
  "meta": {
    "instanceId": "inaugura-lar-whatsapp-bot-advanced"
  },
  "nodes": [
    {
      "id": "webhook-trigger",
      "name": "üîó Webhook WhatsApp",
      "type": "n8n-nodes-base.webhook",
      "position": [240, 400],
      "webhookId": "whatsapp-webjs-messages",
      "parameters": {
        "httpMethod": "POST",
        "path": "whatsapp-messages",
        "responseMode": "responseNode",
        "options": {}
      },
      "typeVersion": 1.1
    },
    {
      "id": "validate-message",
      "name": "‚úÖ Validar Mensagem",
      "type": "n8n-nodes-base.function",
      "position": [440, 400],
      "parameters": {
        "functionCode": "// Validar e normalizar dados do WhatsApp Web.js\nconst body = $input.all()[0].json.body;\n\nif (!body || !body.from || !body.body) {\n  return [];\n}\n\n// Normalizar formato\nconst normalizedMessage = {\n  from: body.from.replace('@c.us', ''),\n  body: body.body,\n  type: body.type || 'chat',\n  timestamp: body.timestamp || Date.now(),\n  id: body.id?.id || body.id,\n  hasMedia: body.hasMedia || false,\n  mediaData: body.mediaData || null,\n  author: body.author || body.from,\n  isGroupMsg: body.isGroupMsg || false,\n  chat: body.chat || { id: body.from }\n};\n\n// Normalizar texto para compara√ß√£o\nnormalizedMessage.normalizedBody = body.body.toLowerCase()\n  .normalize(\"NFD\")\n  .replace(/[\\u0300-\\u036f]/g, \"\")\n  .trim();\n\nreturn [{ json: normalizedMessage }];"
      },
      "typeVersion": 1
    },
    {
      "id": "load-user-state",
      "name": "üìä Carregar Estado",
      "type": "n8n-nodes-base.function",
      "position": [640, 400],
      "parameters": {
        "functionCode": "const userPhone = $json.from;\nconst messageBody = $json.normalizedBody;\nconst currentTime = Date.now();\nconst SESSION_TIMEOUT = 30 * 60 * 1000; // 30 minutos\n\n// Simular carregamento de estado (em produ√ß√£o use base de dados)\nlet userState = null;\n\n// Se n√£o h√° estado ou usu√°rio digitou 'oi', inicializar novo estado\nif (!userState || messageBody === 'oi') {\n  userState = {\n    step: 'awaiting_name',\n    data: {},\n    lastInteraction: currentTime,\n    sessionId: `session_${userPhone}_${currentTime}`\n  };\n}\n\n// Atualizar √∫ltima intera√ß√£o\nuserState.lastInteraction = currentTime;\n\nreturn [{\n  json: {\n    ...userState,\n    userPhone: userPhone,\n    messageData: $json,\n    shouldGreet: !userState || messageBody === 'oi'\n  }\n}];"
      },
      "typeVersion": 1
    },
    {
      "id": "conversation-router",
      "name": "üîÄ Roteador de Conversa",
      "type": "n8n-nodes-base.switch",
      "position": [840, 400],
      "parameters": {
        "rules": {
          "values": [
            {
              "outputKey": "Sauda√ß√£o",
              "conditions": {
                "options": {
                  "version": 2
                },
                "combinator": "and",
                "conditions": [
                  {
                    "operator": {
                      "type": "boolean",
                      "operation": "true"
                    },
                    "leftValue": "={{ $json.shouldGreet === true }}"
                  }
                ]
              },
              "renameOutput": true
            },
            {
              "outputKey": "Nome",
              "conditions": {
                "options": {
                  "version": 2
                },
                "combinator": "and",
                "conditions": [
                  {
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.step }}",
                    "rightValue": "awaiting_name"
                  }
                ]
              },
              "renameOutput": true
            },
            {
              "outputKey": "Menu",
              "conditions": {
                "options": {
                  "version": 2
                },
                "combinator": "and",
                "conditions": [
                  {
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.step }}",
                    "rightValue": "awaiting_main_option"
                  }
                ]
              },
              "renameOutput": true
            },
            {
              "outputKey": "Produto",
              "conditions": {
                "options": {
                  "version": 2
                },
                "combinator": "and",
                "conditions": [
                  {
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    },
                    "leftValue": "={{ $json.step }}",
                    "rightValue": "product_issue"
                  }
                ]
              },
              "renameOutput": true
            },
            {
              "outputKey": "Satisfa√ß√£o",
              "conditions": {
                "options": {
                  "version": 2
                },
                "combinator": "and",
                "conditions": [
                  {
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    },
                    "leftValue": "={{ $json.step }}",
                    "rightValue": "satisfaction"
                  }
                ]
              },
              "renameOutput": true
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra",
          "renameFallbackOutput": "Outros"
        }
      },
      "typeVersion": 3.2
    },
    {
      "id": "send-welcome",
      "name": "üëã Boas-vindas",
      "type": "n8n-nodes-base.set",
      "position": [1080, 200],
      "parameters": {
        "options": {},
        "assignments": {
          "assignments": [
            {
              "id": "response",
              "name": "responseMessage",
              "type": "string",
              "value": "üè† *Inaugura Lar - Atendimento Especializado* üè†\\n\\nOl√°! üëã Seja bem-vindo(a) ao nosso canal de atendimento. Estamos aqui para resolver seu problema com agilidade e qualidade.\\n\\nPara iniciarmos o atendimento personalizado, por favor informe:\\n\\n*Nome completo:*"
            },
            {
              "id": "step",
              "name": "newStep",
              "type": "string",
              "value": "awaiting_name"
            }
          ]
        }
      },
      "typeVersion": 3.4
    },
    {
      "id": "process-name",
      "name": "üë§ Processar Nome",
      "type": "n8n-nodes-base.function",
      "position": [1080, 300],
      "parameters": {
        "functionCode": "const messageBody = $json.messageData.body;\nconst userPhone = $json.userPhone;\n\n// Validar nome (pelo menos duas palavras)\nconst nameParts = messageBody.trim().split(' ');\nif (nameParts.length < 2) {\n  return [{\n    json: {\n      responseMessage: '‚ö†Ô∏è Por favor, informe seu *nome completo* (pelo menos duas palavras) para prosseguirmos.',\n      newStep: 'awaiting_name',\n      userPhone: userPhone,\n      data: $json.data\n    }\n  }];\n}\n\n// Nome v√°lido\nconst firstName = nameParts[0];\nconst fullName = messageBody.trim();\n\nreturn [{\n  json: {\n    responseMessage: `üëã Ol√°, *${firstName}*!\\n\\nComo podemos ajudar voc√™ hoje?\\n\\n*1*. üõ†Ô∏è Problema com produto\\n*2*. üßæ Nota Fiscal\\n*3*. üë®‚Äçüíº Falar com atendente\\n\\nResponda com o *n√∫mero* ou *palavra-chave* da op√ß√£o desejada.`,\n    newStep: 'awaiting_main_option',\n    userPhone: userPhone,\n    data: {\n      ...$json.data,\n      name: fullName,\n      firstName: firstName\n    }\n  }\n}];"
      },
      "typeVersion": 1
    },
    {
      "id": "process-menu",
      "name": "üìã Processar Menu",
      "type": "n8n-nodes-base.function",
      "position": [1080, 400],
      "parameters": {
        "functionCode": "const messageBody = $json.messageData.normalizedBody;\nconst userPhone = $json.userPhone;\nconst userData = $json.data;\n\n// Mapeamento de palavras-chave\nconst keywordMapping = {\n  '1': 'product_issue',\n  'problema': 'product_issue',\n  'defeito': 'product_issue',\n  'quebrado': 'product_issue',\n  'suporte': 'product_issue',\n  '2': 'invoice',\n  'nota fiscal': 'invoice',\n  'nota': 'invoice',\n  'fatura': 'invoice',\n  'nf': 'invoice',\n  '3': 'support',\n  'atendente': 'support',\n  'humano': 'support',\n  'pessoa': 'support',\n  'falar': 'support'\n};\n\nconst action = keywordMapping[messageBody] || keywordMapping[messageBody.split(' ')[0]];\n\nlet response = {};\n\nif (action === 'product_issue') {\n  response = {\n    responseMessage: 'üìã *Registro de Problema com Produto*\\n\\nPara agilizar seu atendimento, por favor envie:\\n\\n1Ô∏è‚É£ *Nota fiscal ou n√∫mero do pedido*\\n(Voc√™ pode enviar uma foto da nota fiscal ou apenas digitar o n√∫mero).',\n    newStep: 'product_issue_nf',\n    flowType: 'product_issue'\n  };\n} else if (action === 'invoice') {\n  response = {\n    responseMessage: \"üßæ A funcionalidade de 'Nota Fiscal' est√° em desenvolvimento. Por favor, escolha outra op√ß√£o.\",\n    newStep: 'awaiting_main_option',\n    flowType: 'invoice_not_available'\n  };\n} else if (action === 'support') {\n  const queuePosition = Math.floor(Math.random() * 5) + 1;\n  response = {\n    responseMessage: `üë®‚Äçüíº *Solicita√ß√£o de Atendimento*\\n\\nSua solicita√ß√£o foi registrada com sucesso!\\n\\n‚è≥ *Todos os nossos atendentes est√£o ocupados no momento.*\\nVoc√™ foi adicionado √† fila de atendimento. Posi√ß√£o: *${queuePosition}*.\\n\\nAguarde, em breve um atendente estar√° com voc√™!`,\n    newStep: 'transfer_to_human',\n    flowType: 'human_support',\n    queuePosition: queuePosition\n  };\n} else {\n  response = {\n    responseMessage: 'Op√ß√£o inv√°lida. Por favor, escolha uma das op√ß√µes do menu.',\n    newStep: 'awaiting_main_option',\n    flowType: 'invalid_option'\n  };\n}\n\nreturn [{\n  json: {\n    ...response,\n    userPhone: userPhone,\n    data: userData\n  }\n}];"
      },
      "typeVersion": 1
    },
    {
      "id": "process-product",
      "name": "üõ†Ô∏è Problema Produto",
      "type": "n8n-nodes-base.function",
      "position": [1080, 500],
      "parameters": {
        "functionCode": "const step = $json.step;\nconst messageData = $json.messageData;\nconst userPhone = $json.userPhone;\nconst userData = $json.data;\n\nlet response = {};\n\nswitch (step) {\n  case 'product_issue_nf':\n    if (messageData.hasMedia) {\n      userData.invoice = `Imagem recebida - ${messageData.id}`;\n    } else {\n      userData.invoice = messageData.body;\n    }\n    response = {\n      responseMessage: '‚úÖ *Nota fiscal recebida!*\\n\\nAgora, por favor, envie uma *foto clara do produto com problema*.',\n      newStep: 'product_issue_photo'\n    };\n    break;\n\n  case 'product_issue_photo':\n    if (!messageData.hasMedia) {\n      response = {\n        responseMessage: '‚ö†Ô∏è Por favor, envie uma *foto* para prosseguir.',\n        newStep: 'product_issue_photo'\n      };\n    } else {\n      userData.productPhoto = `Foto produto - ${messageData.id}`;\n      response = {\n        responseMessage: '‚úÖ *Foto do produto recebida!*\\n\\nAgora, por favor, envie uma *foto da embalagem/caixa* do produto.',\n        newStep: 'product_issue_box_photo'\n      };\n    }\n    break;\n\n  case 'product_issue_box_photo':\n    if (!messageData.hasMedia) {\n      response = {\n        responseMessage: '‚ö†Ô∏è Por favor, envie uma *foto* para prosseguir.',\n        newStep: 'product_issue_box_photo'\n      };\n    } else {\n      userData.boxPhoto = `Foto embalagem - ${messageData.id}`;\n      response = {\n        responseMessage: '‚úÖ *Foto da embalagem recebida!*\\n\\nPor √∫ltimo, envie uma *foto das etiquetas ou c√≥digo de barras* do produto.',\n        newStep: 'product_issue_label_photo'\n      };\n    }\n    break;\n\n  case 'product_issue_label_photo':\n    if (!messageData.hasMedia) {\n      response = {\n        responseMessage: '‚ö†Ô∏è Por favor, envie uma *foto* para prosseguir.',\n        newStep: 'product_issue_label_photo'\n      };\n    } else {\n      userData.labelPhoto = `Foto etiquetas - ${messageData.id}`;\n      response = {\n        responseMessage: '‚úÖ *Todas as informa√ß√µes foram recebidas com sucesso!*\\n\\n‚úèÔ∏è *Deseja adicionar alguma observa√ß√£o ou detalhe sobre o problema?*\\n\\nSe sim, por favor escreva agora. Se n√£o, responda com *\"N√£o\"*.',\n        newStep: 'product_issue_comments'\n      };\n    }\n    break;\n\n  case 'product_issue_comments':\n    userData.comments = messageData.normalizedBody === 'nao' ? 'Nenhuma observa√ß√£o.' : messageData.body;\n    response = {\n      responseMessage: 'Obrigado! Sua solicita√ß√£o foi registrada e nossa equipe de especialistas j√° est√° analisando o seu caso.\\n\\nEntraremos em contato neste mesmo n√∫mero para dar continuidade.',\n      newStep: 'awaiting_satisfaction_rating',\n      ticketData: userData,\n      triggerSatisfaction: true\n    };\n    break;\n\n  default:\n    response = {\n      responseMessage: '‚ö†Ô∏è Ops! Ocorreu um problema. Vamos come√ßar novamente.',\n      newStep: 'awaiting_name'\n    };\n}\n\nreturn [{\n  json: {\n    ...response,\n    userPhone: userPhone,\n    data: userData\n  }\n}];"
      },
      "typeVersion": 1
    },
    {
      "id": "process-satisfaction",
      "name": "üìä Satisfa√ß√£o",
      "type": "n8n-nodes-base.function",
      "position": [1080, 600],
      "parameters": {
        "functionCode": "const step = $json.step;\nconst messageData = $json.messageData;\nconst userPhone = $json.userPhone;\nconst userData = $json.data;\n\nlet response = {};\n\nswitch (step) {\n  case 'awaiting_satisfaction_rating':\n    const rating = parseInt(messageData.body.trim());\n    if (isNaN(rating) || rating < 1 || rating > 5) {\n      response = {\n        responseMessage: '‚ö†Ô∏è Por favor, responda com um n√∫mero de 1 a 5.',\n        newStep: 'awaiting_satisfaction_rating'\n      };\n    } else {\n      userData.rating = rating;\n      response = {\n        responseMessage: 'Obrigado pela sua avalia√ß√£o! Para concluir, voc√™ poderia deixar um breve coment√°rio sobre sua experi√™ncia?',\n        newStep: 'awaiting_satisfaction_feedback'\n      };\n    }\n    break;\n\n  case 'awaiting_satisfaction_feedback':\n    userData.feedback = messageData.body;\n    response = {\n      responseMessage: 'üôè *Muito obrigado pelo seu feedback!*\\n\\nSuas observa√ß√µes s√£o muito valiosas. Tenha um √≥timo dia!',\n      newStep: 'conversation_completed',\n      finalizeSession: true,\n      satisfactionData: {\n        rating: userData.rating,\n        feedback: userData.feedback,\n        timestamp: Date.now()\n      }\n    };\n    break;\n\n  default:\n    response = {\n      responseMessage: 'üìä *Pesquisa de Satisfa√ß√£o*\\n\\nPara nos ajudar a melhorar, como voc√™ avalia este atendimento inicial?\\n\\nResponda com um n√∫mero de 1 a 5:\\n1 - Muito Ruim üò†\\n2 - Ruim üôÅ\\n3 - Regular üòê\\n4 - Bom üôÇ\\n5 - Excelente üòÑ',\n      newStep: 'awaiting_satisfaction_rating'\n    };\n}\n\nreturn [{\n  json: {\n    ...response,\n    userPhone: userPhone,\n    data: userData\n  }\n}];"
      },
      "typeVersion": 1
    },
    {
      "id": "save-state",
      "name": "üíæ Salvar Estado",
      "type": "n8n-nodes-base.function",
      "position": [1320, 400],
      "parameters": {
        "functionCode": "const userPhone = $json.userPhone;\nconst newStep = $json.newStep;\nconst userData = $json.data || {};\nconst currentTime = Date.now();\n\n// Preparar novo estado\nconst newState = {\n  step: newStep,\n  data: userData,\n  lastInteraction: currentTime,\n  sessionId: $json.sessionId || `session_${userPhone}_${currentTime}`\n};\n\n// Se a sess√£o deve ser finalizada, n√£o salvar estado\nif ($json.finalizeSession) {\n  newState.step = 'completed';\n}\n\n// Em produ√ß√£o, salvar no banco de dados aqui\nconsole.log(`[SAVE STATE] ${userPhone}: ${newStep}`);\n\nreturn [{\n  json: {\n    userPhone: userPhone,\n    userState: newState,\n    responseMessage: $json.responseMessage,\n    shouldDelete: $json.finalizeSession || false,\n    ticketData: $json.ticketData,\n    satisfactionData: $json.satisfactionData,\n    triggerSatisfaction: $json.triggerSatisfaction\n  }\n}];"
      },
      "typeVersion": 1
    },
    {
      "id": "send-response",
      "name": "üì± Enviar Resposta",
      "type": "n8n-nodes-base.httpRequest",
      "position": [1520, 400],
      "parameters": {
        "url": "http://localhost:3002/api/send-message",
        "method": "POST",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"chatId\": $json.userPhone + '@c.us',\n  \"message\": $json.responseMessage,\n  \"options\": {\n    \"linkPreview\": false\n  }\n} }}",
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "satisfaction-delay",
      "name": "‚è±Ô∏è Delay 5s",
      "type": "n8n-nodes-base.wait",
      "position": [1320, 600],
      "parameters": {
        "amount": 5,
        "unit": "seconds"
      },
      "typeVersion": 1.1
    },
    {
      "id": "send-satisfaction",
      "name": "üìä Enviar Pesquisa",
      "type": "n8n-nodes-base.httpRequest",
      "position": [1520, 600],
      "parameters": {
        "url": "http://localhost:3002/api/send-message",
        "method": "POST",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"chatId\": $json.userPhone + '@c.us',\n  \"message\": \"üìä *Pesquisa de Satisfa√ß√£o*\\n\\nPara nos ajudar a melhorar, como voc√™ avalia este atendimento inicial?\\n\\nResponda com um n√∫mero de 1 a 5:\\n1 - Muito Ruim üò†\\n2 - Ruim üôÅ\\n3 - Regular üòê\\n4 - Bom üôÇ\\n5 - Excelente üòÑ\",\n  \"options\": {\n    \"linkPreview\": false\n  }\n} }}",
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "typeVersion": 4.2
    },
    {
      "id": "log-interaction",
      "name": "üìù Log",
      "type": "n8n-nodes-base.function",
      "position": [1720, 400],
      "parameters": {
        "functionCode": "const userPhone = $json.userPhone;\nconst timestamp = new Date().toISOString();\nconst step = $json.userState?.step || 'unknown';\n\nconsole.log(`[${timestamp}] Usu√°rio ${userPhone} - Passo: ${step}`);\n\nif ($json.ticketData) {\n  console.log(`[TICKET CRIADO] ${userPhone}:`, JSON.stringify($json.ticketData, null, 2));\n}\n\nif ($json.satisfactionData) {\n  console.log(`[PESQUISA CONCLU√çDA] ${userPhone}:`, JSON.stringify($json.satisfactionData, null, 2));\n}\n\nreturn [{ json: { success: true, timestamp: timestamp } }];"
      },
      "typeVersion": 1
    },
    {
      "id": "webhook-response",
      "name": "‚úÖ Resposta",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [1920, 400],
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"success\": true, \"message\": \"Processado\", \"timestamp\": new Date().toISOString() } }}"
      },
      "typeVersion": 1.1
    }
  ],
  "pinData": {},
  "connections": {
    "üîó Webhook WhatsApp": {
      "main": [
        [
          {
            "node": "‚úÖ Validar Mensagem",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚úÖ Validar Mensagem": {
      "main": [
        [
          {
            "node": "üìä Carregar Estado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä Carregar Estado": {
      "main": [
        [
          {
            "node": "üîÄ Roteador de Conversa",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîÄ Roteador de Conversa": {
      "main": [
        [
          {
            "node": "üëã Boas-vindas",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üë§ Processar Nome",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üìã Processar Menu",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üõ†Ô∏è Problema Produto",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üìä Satisfa√ß√£o",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üëã Boas-vindas": {
      "main": [
        [
          {
            "node": "üíæ Salvar Estado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üë§ Processar Nome": {
      "main": [
        [
          {
            "node": "üíæ Salvar Estado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Processar Menu": {
      "main": [
        [
          {
            "node": "üíæ Salvar Estado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üõ†Ô∏è Problema Produto": {
      "main": [
        [
          {
            "node": "üíæ Salvar Estado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä Satisfa√ß√£o": {
      "main": [
        [
          {
            "node": "üíæ Salvar Estado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Salvar Estado": {
      "main": [
        [
          {
            "node": "üì± Enviar Resposta",
            "type": "main",
            "index": 0
          },
          {
            "node": "‚è±Ô∏è Delay 5s",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üì± Enviar Resposta": {
      "main": [
        [
          {
            "node": "üìù Log",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚è±Ô∏è Delay 5s": {
      "main": [
        [
          {
            "node": "üìä Enviar Pesquisa",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìù Log": {
      "main": [
        [
          {
            "node": "‚úÖ Resposta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-06-20T12:00:00.000Z",
      "updatedAt": "2025-06-20T12:00:00.000Z",
      "id": "inaugura-lar-bot",
      "name": "Inaugura Lar Bot"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-06-20T12:00:00.000Z",
  "versionId": "v1.0.0"
}
