// Script de teste para verificar o fluxo completo de verifica√ß√£o de email
// Execute: npx ts-node scripts/test-verification-flow.ts

import { PrismaClient } from "@prisma/client"

const prisma = new PrismaClient()

async function testVerificationFlow() {
  console.log("üß™ Iniciando teste do fluxo de verifica√ß√£o de email...")
  
  try {
    // 1. Verificar se h√° usu√°rios com email n√£o verificado
    const unverifiedUsers = await prisma.user.findMany({
      where: { 
        emailVerified: null 
      },
      select: {
        email: true,
        emailVerified: true,
        isActive: true,
        createdAt: true
      }
    })
    
    console.log(`üìä Usu√°rios com email n√£o verificado: ${unverifiedUsers.length}`)
    unverifiedUsers.forEach(user => {
      console.log(`   - ${user.email} (criado em: ${user.createdAt.toLocaleString()})`)
    })
    
    // 2. Verificar tokens de verifica√ß√£o pendentes
    const pendingTokens = await prisma.verificationToken.findMany({
      where: {
        expires: {
          gte: new Date() // Tokens ainda v√°lidos
        }
      },
      select: {
        identifier: true,
        token: true,
        expires: true
      }
    })
    
    console.log(`üîë Tokens de verifica√ß√£o v√°lidos: ${pendingTokens.length}`)
    pendingTokens.forEach(token => {
      console.log(`   - ${token.identifier}: ${token.token} (expira: ${token.expires.toLocaleString()})`)
    })
    
    // 3. Simular verifica√ß√£o de email
    if (pendingTokens.length > 0) {
      const testToken = pendingTokens[0]
      console.log(`\nüîç Testando verifica√ß√£o para: ${testToken.identifier}`)
      
      // Buscar usu√°rio
      const user = await prisma.user.findUnique({
        where: { email: testToken.identifier }
      })
      
      if (user) {
        console.log(`‚úÖ Usu√°rio encontrado: ${user.email}`)
        console.log(`   - Email verificado: ${user.emailVerified ? "Sim" : "N√£o"}`)
        console.log(`   - Conta ativa: ${user.isActive ? "Sim" : "N√£o"}`)
        console.log(`   - Role: ${user.role}`)
        
        if (!user.emailVerified) {
          console.log(`\nüí° Para verificar este usu√°rio, use o c√≥digo: ${testToken.token}`)
          console.log(`   URL: http://localhost:3052/verify-email?email=${encodeURIComponent(user.email)}`)
        }
      }
    }
    
    // 4. Verificar eventos de seguran√ßa relacionados
    const recentEvents = await prisma.securityEvent.findMany({
      where: {
        type: {
          in: ["EMAIL_VERIFIED", "USER_REGISTERED", "USER_LOGIN"]
        }
      },
      orderBy: { timestamp: "desc" },
      take: 10,
      select: {
        type: true,
        description: true,
        timestamp: true,
        userId: true
      }
    })
    
    console.log(`\nüìã Eventos de seguran√ßa recentes (${recentEvents.length}):`)
    recentEvents.forEach(event => {
      console.log(`   - ${event.type}: ${event.description} (${event.timestamp.toLocaleString()})`)
    })
    
    console.log("\n‚úÖ Teste do fluxo de verifica√ß√£o conclu√≠do!")
    
  } catch (error) {
    console.error("‚ùå Erro no teste:", error)
  } finally {
    await prisma.$disconnect()
  }
}

// Fun√ß√£o para testar o redirecionamento
function testRedirectFlow() {
  console.log("\nüîÑ Testando fluxo de redirecionamento:")
  console.log("1. Usu√°rio verifica email ‚Üí /verify-email")
  console.log("2. API retorna: redirectTo: '/login?message=email-verified&redirect=dashboard'")
  console.log("3. P√°gina redireciona para: /login com par√¢metros")
  console.log("4. LoginForm detecta par√¢metros e mostra mensagem de sucesso")
  console.log("5. Ap√≥s login bem-sucedido ‚Üí router.push('/dashboard')")
  console.log("6. Middleware protege /dashboard (requer autentica√ß√£o)")
  console.log("7. Dashboard carrega com dados do usu√°rio")
  console.log("\n‚úÖ Fluxo de redirecionamento est√° correto!")
}

if (require.main === module) {
  testVerificationFlow()
  testRedirectFlow()
}

export { testVerificationFlow }
