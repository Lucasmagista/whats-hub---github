#!/usr/bin/env node

/**
 * Script de verifica√ß√£o final da migra√ß√£o EmailJS ‚Üí MailerSend
 * Verifica se toda a migra√ß√£o foi conclu√≠da com sucesso
 */

const fs = require('fs');
const path = require('path');

console.log('üîç VERIFICA√á√ÉO FINAL DA MIGRA√á√ÉO MAILERSEND\n');

// 1. Verificar se MailerSend est√° instalado
console.log('1Ô∏è‚É£ Verificando instala√ß√£o do MailerSend...');
try {
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  if (packageJson.dependencies.mailersend) {
    console.log(`   ‚úÖ MailerSend instalado: v${packageJson.dependencies.mailersend}`);
  } else {
    console.log('   ‚ùå MailerSend n√£o encontrado no package.json');
  }
  
  // Verificar se depend√™ncias antigas foram removidas
  if (!packageJson.dependencies['@emailjs/browser']) {
    console.log('   ‚úÖ @emailjs/browser removido');
  } else {
    console.log('   ‚ö†Ô∏è @emailjs/browser ainda presente');
  }
  
  if (!packageJson.dependencies['nodemailer']) {
    console.log('   ‚úÖ nodemailer removido');
  } else {
    console.log('   ‚ö†Ô∏è nodemailer ainda presente');
  }
  
  if (!packageJson.devDependencies['@types/nodemailer']) {
    console.log('   ‚úÖ @types/nodemailer removido');
  } else {
    console.log('   ‚ö†Ô∏è @types/nodemailer ainda presente');
  }
} catch (error) {
  console.log('   ‚ùå Erro ao ler package.json:', error.message);
}

console.log('');

// 2. Verificar arquivo EmailService
console.log('2Ô∏è‚É£ Verificando EmailService...');
try {
  const emailServicePath = path.join('lib', 'email-service.ts');
  if (fs.existsSync(emailServicePath)) {
    const content = fs.readFileSync(emailServicePath, 'utf8');
    
    if (content.includes('mailersend')) {
      console.log('   ‚úÖ EmailService usando MailerSend');
    } else {
      console.log('   ‚ùå EmailService n√£o est√° usando MailerSend');
    }
    
    if (!content.includes('emailjs') && !content.includes('nodemailer')) {
      console.log('   ‚úÖ Depend√™ncias antigas removidas do c√≥digo');
    } else {
      console.log('   ‚ö†Ô∏è C√≥digo ainda cont√©m refer√™ncias antigas');
    }
    
    // Verificar se backup existe
    const backupPath = path.join('lib', 'email-service.backup.ts');
    if (fs.existsSync(backupPath)) {
      console.log('   ‚úÖ Backup do EmailService antigo criado');
    } else {
      console.log('   ‚ö†Ô∏è Backup n√£o encontrado');
    }
  } else {
    console.log('   ‚ùå EmailService n√£o encontrado');
  }
} catch (error) {
  console.log('   ‚ùå Erro ao verificar EmailService:', error.message);
}

console.log('');

// 3. Verificar arquivos de configura√ß√£o
console.log('3Ô∏è‚É£ Verificando configura√ß√µes...');
try {
  // Verificar .env.example
  if (fs.existsSync('.env.example')) {
    const envExample = fs.readFileSync('.env.example', 'utf8');
    if (envExample.includes('MAILERSEND_API_TOKEN')) {
      console.log('   ‚úÖ .env.example atualizado com MailerSend');
    } else {
      console.log('   ‚ö†Ô∏è .env.example n√£o cont√©m configura√ß√µes MailerSend');
    }
  } else {
    console.log('   ‚ö†Ô∏è .env.example n√£o encontrado');
  }
  
  // Verificar documenta√ß√£o
  if (fs.existsSync('MAILERSEND_SETUP.md')) {
    console.log('   ‚úÖ Documenta√ß√£o MailerSend criada');
  } else {
    console.log('   ‚ö†Ô∏è Documenta√ß√£o MailerSend n√£o encontrada');
  }
  
  // Verificar plano de migra√ß√£o
  if (fs.existsSync('MIGRACAO_MAILERSEND.md')) {
    console.log('   ‚úÖ Plano de migra√ß√£o atualizado');
  } else {
    console.log('   ‚ö†Ô∏è Plano de migra√ß√£o n√£o encontrado');
  }
} catch (error) {
  console.log('   ‚ùå Erro ao verificar configura√ß√µes:', error.message);
}

console.log('');

// 4. Verificar scripts
console.log('4Ô∏è‚É£ Verificando scripts...');
try {
  const testEmailPath = path.join('scripts', 'test-email.ts');
  if (fs.existsSync(testEmailPath)) {
    const content = fs.readFileSync(testEmailPath, 'utf8');
    if (content.includes('MailerSend')) {
      console.log('   ‚úÖ Script de teste atualizado');
    } else {
      console.log('   ‚ö†Ô∏è Script de teste n√£o atualizado');
    }
  } else {
    console.log('   ‚ö†Ô∏è Script de teste n√£o encontrado');
  }
} catch (error) {
  console.log('   ‚ùå Erro ao verificar scripts:', error.message);
}

console.log('');

// 5. Verificar node_modules
console.log('5Ô∏è‚É£ Verificando node_modules...');
try {
  if (fs.existsSync(path.join('node_modules', 'mailersend'))) {
    console.log('   ‚úÖ MailerSend instalado nos node_modules');
  } else {
    console.log('   ‚ùå MailerSend n√£o encontrado nos node_modules');
    console.log('       Execute: npm install');
  }
} catch (error) {
  console.log('   ‚ùå Erro ao verificar node_modules:', error.message);
}

console.log('\n' + '='.repeat(50));
console.log('üìã RESUMO DA MIGRA√á√ÉO:');
console.log('‚úÖ Sistema migrado para MailerSend');
console.log('‚úÖ Depend√™ncias antigas removidas');
console.log('‚úÖ Interface mantida para compatibilidade');
console.log('‚úÖ Documenta√ß√£o atualizada');
console.log('');
console.log('üöÄ PR√ìXIMOS PASSOS:');
console.log('1. Configure sua conta MailerSend');
console.log('2. Adicione MAILERSEND_API_TOKEN ao .env');
console.log('3. Configure FROM_EMAIL no .env');
console.log('4. Execute: npm run test:email');
console.log('5. Teste todos os fluxos de email');
console.log('');
console.log('üìö Documenta√ß√£o: MAILERSEND_SETUP.md');
console.log('='.repeat(50));
